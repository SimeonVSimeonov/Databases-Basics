--TASK 1

CREATE TABLE Passports(
	PassportID INT IDENTITY,
	PassportNumber NVARCHAR(32) NOT NULL UNIQUE,
	CONSTRAINT PK_Passport PRIMARY KEY (PassportID)
)

CREATE TABLE Persons(
	PersonID INT IDENTITY,
	FirstName NVARCHAR(64) NOT NULL,
	Salary DECIMAL(15, 2) NOT NULL,
	PassportID INT NOT NULL UNIQUE,
	CONSTRAINT PK_Persons PRIMARY KEY (PersonID),
	CONSTRAINT FK_Persons_Passports FOREIGN KEY (PassportID) REFERENCES Passports(PassportID)
)

--TEST TASK 1

INSERT INTO Passports
VALUES 
('FSS23265980'),
('DFG54511548'),
('HTR54875125'),
('LKJ54985139'),
('GTR56451311'),
('NGG23213133')

INSERT INTO Persons
VALUES
(' MAN', 2000, 3),
('PEPO MAN', 2980, 2),
('IVO MAN', 2070, 1),
('MIKO MAN', 2090, 4),
('MIKA MAN', 2700, 6),
('SIMO MAN', 2040, 5)

SELECT *
FROM Persons

--TASK 2

CREATE TABLE Manufacturers(
	ManufacturerID INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(15) NOT NULL,
	EstablishedOn DATE NOT NULL
)

CREATE TABLE Models(
	--ModelID	Name	ManufacturerID
	ModelID INT PRIMARY KEY IDENTITY(101,1),
	[Name] VARCHAR(15) NOT NULL,
	ManufacturerID INT FOREIGN KEY REFERENCES Manufacturers(ManufacturerID)
)

--TEST TASK 2

INSERT INTO Manufacturers(Name, EstablishedOn)
VALUES  ('BMW', '07/03/1916'),
		('Tesla', '01/01/2003'),
		('Lada', '01/05/1966')

INSERT INTO Models(Name,ManufacturerID)
VALUES  ('X1', 1),
		('i6', 1),
		('Model S', 2),
		('Model X', 2),
		('Model 3', 2),
		('Nova', 3)

-- TASK 3

CREATE TABLE Students(
	StudentID INT,
	Name VARCHAR(20)
)

CREATE TABLE Exams(
	ExamID INT,
	Name VARCHAR(20)
)

CREATE TABLE StudentsExams(
	StudentID INT,
	ExamID INT
)

ALTER TABLE Students
ALTER COLUMN StudentID INT NOT NULL

ALTER TABLE Students
ADD CONSTRAINT PK_Students PRIMARY KEY(StudentID)

ALTER TABLE Exams
ALTER COLUMN ExamID INT NOT NULL

ALTER TABLE Exams
ADD CONSTRAINT PK_Exams PRIMARY KEY(ExamID)

ALTER TABLE StudentsExams
ALTER COLUMN StudentID INT NOT NULL

ALTER TABLE StudentsExams
ALTER COLUMN ExamID INT NOT NULL

ALTER TABLE StudentsExams
ADD CONSTRAINT PK_StudentsExams PRIMARY KEY(StudentID, ExamID)

ALTER TABLE StudentsExams
ADD CONSTRAINT FK_StudentsExams_Students FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
	CONSTRAINT FK_StudentsExams_Exams FOREIGN KEY (ExamID) REFERENCES Exams(ExamID)

-- TASK 3 REFACTOR

CREATE TABLE Students(
	StudentID INT IDENTITY, 
	[Name] NVARCHAR(64) NOT NULL, 

	CONSTRAINT PK_Students 
	PRIMARY KEY (StudentID)
)

CREATE TABLE Exams(
	ExamID INT IDENTITY, 
	[Name] NVARCHAR(64) NOT NULL,

	CONSTRAINT PK_Exams 
	PRIMARY KEY (ExamID)
)

CREATE TABLE StudentsExams(
	StudentID INT NOT NULL, 
	ExamID INT NOT NULL,

	CONSTRAINT PK_Students_Exams
	PRIMARY KEY (StudentID, ExamID), 

	CONSTRAINT FK_Students 
	FOREIGN KEY (StudentID) 
	REFERENCES Students(StudentID),

	CONSTRAINT FK_Exams
	FOREIGN KEY (ExamID)
	REFERENCES Exams(ExamID)
)

-- TASK 4

CREATE TABLE Teachers(
	TeacherID INT PRIMARY KEY IDENTITY(101,1),
	[Name] VARCHAR(64),
	ManagerID INT FOREIGN KEY REFERENCES Teachers(TeacherID)
)

-- TEST TASK 4

INSERT INTO Teachers([Name], ManagerID)
VALUES	('John', NULL),
		('Maya', 106),
		('Silvia', 106),
		('Ted', 105),
		('Mark', 101),
		('Greta', 101)

		 
-- TASK 5

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.ItemTypes
	(
	ItemTypeID int NOT NULL,
	Name varchar(50) NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.ItemTypes ADD CONSTRAINT
	PK_ItemTypes PRIMARY KEY CLUSTERED 
	(
	ItemTypeID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.ItemTypes SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Items
	(
	ItemID int NOT NULL,
	Name varchar(50) NOT NULL,
	ItemTypeID int NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Items ADD CONSTRAINT
	PK_Items PRIMARY KEY CLUSTERED 
	(
	ItemID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Items ADD CONSTRAINT
	FK_Items_ItemTypes FOREIGN KEY
	(
	ItemTypeID
	) REFERENCES dbo.ItemTypes
	(
	ItemTypeID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.Items SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Cities
	(
	CityID int NOT NULL,
	Name varchar(50) NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Cities ADD CONSTRAINT
	PK_Cities PRIMARY KEY CLUSTERED 
	(
	CityID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Cities SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Customers
	(
	CustomerID int NOT NULL,
	Name varchar(50) NOT NULL,
	Birthday date NOT NULL,
	CityID int NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Customers ADD CONSTRAINT
	PK_Customers PRIMARY KEY CLUSTERED 
	(
	CustomerID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Customers ADD CONSTRAINT
	FK_Customers_Cities FOREIGN KEY
	(
	CityID
	) REFERENCES dbo.Cities
	(
	CityID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.Customers SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Orders
	(
	OrderID int NOT NULL,
	CustomerID int NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Orders ADD CONSTRAINT
	PK_Orders PRIMARY KEY CLUSTERED 
	(
	OrderID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Orders ADD CONSTRAINT
	FK_Orders_Customers FOREIGN KEY
	(
	CustomerID
	) REFERENCES dbo.Customers
	(
	CustomerID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.Orders SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.OrderItems
	(
	OrderID int NOT NULL,
	ItemID int NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.OrderItems ADD CONSTRAINT
	PK_OrderItems PRIMARY KEY CLUSTERED 
	(
	OrderID,
	ItemID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.OrderItems ADD CONSTRAINT
	FK_OrderItems_Items FOREIGN KEY
	(
	ItemID
	) REFERENCES dbo.Items
	(
	ItemID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.OrderItems ADD CONSTRAINT
	FK_OrderItems_Orders FOREIGN KEY
	(
	OrderID
	) REFERENCES dbo.Orders
	(
	OrderID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.OrderItems SET (LOCK_ESCALATION = TABLE)

COMMIT

-- TASK 6

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Majors
	(
	MajorID int NOT NULL,
	Name varchar(50) NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Majors ADD CONSTRAINT
	PK_Majors PRIMARY KEY CLUSTERED 
	(
	MajorID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Majors SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Students
	(
	StudentID int NOT NULL,
	StudentNumber int NOT NULL,
	StudentName varchar(50) NOT NULL,
	MajorID int NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Students ADD CONSTRAINT
	PK_Students PRIMARY KEY CLUSTERED 
	(
	StudentID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Students ADD CONSTRAINT
	FK_Students_Majors FOREIGN KEY
	(
	MajorID
	) REFERENCES dbo.Majors
	(
	MajorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.Students SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Payments
	(
	PaymentID int NOT NULL,
	PaymentDate date NOT NULL,
	PaymentAmount decimal(15, 2) NOT NULL,
	StudentID int NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Payments ADD CONSTRAINT
	PK_Payments PRIMARY KEY CLUSTERED 
	(
	PaymentID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Payments ADD CONSTRAINT
	FK_Payments_Students FOREIGN KEY
	(
	StudentID
	) REFERENCES dbo.Students
	(
	StudentID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.Payments SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Subjects
	(
	SubjectID int NOT NULL,
	SubjectName varchar(50) NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Subjects ADD CONSTRAINT
	PK_Subjects PRIMARY KEY CLUSTERED 
	(
	SubjectID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Subjects SET (LOCK_ESCALATION = TABLE)

COMMIT
BEGIN TRANSACTION

CREATE TABLE dbo.Agenda
	(
	StudentID int NOT NULL,
	SubjectID int NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Agenda ADD CONSTRAINT
	PK_Agenda PRIMARY KEY CLUSTERED 
	(
	StudentID,
	SubjectID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.Agenda ADD CONSTRAINT
	FK_Agenda_Subjects FOREIGN KEY
	(
	SubjectID
	) REFERENCES dbo.Subjects
	(
	SubjectID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.Agenda ADD CONSTRAINT
	FK_Agenda_Students FOREIGN KEY
	(
	StudentID
	) REFERENCES dbo.Students
	(
	StudentID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	

ALTER TABLE dbo.Agenda SET (LOCK_ESCALATION = TABLE)

COMMIT

-- TASK 9

SELECT M.MountainRange, P.PeakName,P.Elevation
FROM Peaks AS P
JOIN Mountains AS M
ON M.Id = P.MountainId
WHERE M.MountainRange = 'RILA'
ORDER BY P.Elevation DESC

